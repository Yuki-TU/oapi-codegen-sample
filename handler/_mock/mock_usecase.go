// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler/usecase.go
//
// Generated by this command:
//
//	mockgen -source=./handler/usecase.go -destination=./handler/_mock/mock_usecase.go
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	gen "github.com/Yuki-TU/oapi-codegen-sample/gen"
	usecase "github.com/Yuki-TU/oapi-codegen-sample/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockGetAccountService is a mock of GetAccountService interface.
type MockGetAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockGetAccountServiceMockRecorder
}

// MockGetAccountServiceMockRecorder is the mock recorder for MockGetAccountService.
type MockGetAccountServiceMockRecorder struct {
	mock *MockGetAccountService
}

// NewMockGetAccountService creates a new mock instance.
func NewMockGetAccountService(ctrl *gomock.Controller) *MockGetAccountService {
	mock := &MockGetAccountService{ctrl: ctrl}
	mock.recorder = &MockGetAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAccountService) EXPECT() *MockGetAccountServiceMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockGetAccountService) GetAccount(ctx context.Context) (usecase.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx)
	ret0, _ := ret[0].(usecase.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockGetAccountServiceMockRecorder) GetAccount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockGetAccountService)(nil).GetAccount), ctx)
}

// MockUpdateAccountUsecase is a mock of UpdateAccountUsecase interface.
type MockUpdateAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateAccountUsecaseMockRecorder
}

// MockUpdateAccountUsecaseMockRecorder is the mock recorder for MockUpdateAccountUsecase.
type MockUpdateAccountUsecaseMockRecorder struct {
	mock *MockUpdateAccountUsecase
}

// NewMockUpdateAccountUsecase creates a new mock instance.
func NewMockUpdateAccountUsecase(ctrl *gomock.Controller) *MockUpdateAccountUsecase {
	mock := &MockUpdateAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateAccountUsecase) EXPECT() *MockUpdateAccountUsecaseMockRecorder {
	return m.recorder
}

// UpdateAccount mocks base method.
func (m *MockUpdateAccountUsecase) UpdateAccount(ctx context.Context, input gen.PutAccountJSONRequestBody) (usecase.UpdateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, input)
	ret0, _ := ret[0].(usecase.UpdateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockUpdateAccountUsecaseMockRecorder) UpdateAccount(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockUpdateAccountUsecase)(nil).UpdateAccount), ctx, input)
}
