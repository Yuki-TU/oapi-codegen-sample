// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// アカウント情報取得
	// (GET /account)
	GetAccount(c *gin.Context)
	// アカウント情報更新
	// (PUT /account)
	PutAccount(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccount(c)
}

// PutAccount operation middleware
func (siw *ServerInterfaceWrapper) PutAccount(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAccount(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/account", wrapper.GetAccount)
	router.PUT(options.BaseURL+"/account", wrapper.PutAccount)
}

type N400ErrorJSONResponse Error

type N401UnauthorizedErrorJSONResponse Error

type N404ErrorJSONResponse Error

type N500ErrorJSONResponse Error

type GetAccountRequestObject struct {
}

type GetAccountResponseObject interface {
	VisitGetAccountResponse(w http.ResponseWriter) error
}

type GetAccount200JSONResponse struct {
	// AcquisitionPoint 保有ポイント
	AcquisitionPoint int    `json:"acquisitionPoint"`
	Email            string `json:"email"`
	FamilyName       string `json:"familyName"`
	FamilyNameKana   string `json:"familyNameKana"`
	FirstName        string `json:"firstName"`
	FirstNameKana    string `json:"firstNameKana"`

	// SendablePoint 送信可能ポイント
	SendablePoint int     `json:"sendablePoint"`
	UserId        float32 `json:"userId"`
}

func (response GetAccount200JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount401JSONResponse struct {
	N401UnauthorizedErrorJSONResponse
}

func (response GetAccount401JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount500JSONResponse struct{ N500ErrorJSONResponse }

func (response GetAccount500JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutAccountRequestObject struct {
	Body *PutAccountJSONRequestBody
}

type PutAccountResponseObject interface {
	VisitPutAccountResponse(w http.ResponseWriter) error
}

type PutAccount201JSONResponse struct {
	Status string `json:"status"`
}

func (response PutAccount201JSONResponse) VisitPutAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutAccount400JSONResponse struct{ N400ErrorJSONResponse }

func (response PutAccount400JSONResponse) VisitPutAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutAccount401JSONResponse struct {
	N401UnauthorizedErrorJSONResponse
}

func (response PutAccount401JSONResponse) VisitPutAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutAccount404JSONResponse struct{ N404ErrorJSONResponse }

func (response PutAccount404JSONResponse) VisitPutAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutAccount500JSONResponse struct{ N500ErrorJSONResponse }

func (response PutAccount500JSONResponse) VisitPutAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// アカウント情報取得
	// (GET /account)
	GetAccount(ctx *gin.Context, request GetAccountRequestObject) (GetAccountResponseObject, error)
	// アカウント情報更新
	// (PUT /account)
	PutAccount(ctx *gin.Context, request PutAccountRequestObject) (PutAccountResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx *gin.Context) {
	var request GetAccountRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccount(ctx, request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccountResponseObject); ok {
		if err := validResponse.VisitGetAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAccount operation middleware
func (sh *strictHandler) PutAccount(ctx *gin.Context) {
	var request PutAccountRequestObject

	var body PutAccountJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAccount(ctx, request.(PutAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAccountResponseObject); ok {
		if err := validResponse.VisitPutAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
