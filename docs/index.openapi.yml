openapi: 3.0.0
info:
  version: 0.2.0
  title: point-app-backend RESTful API
  description: ハッカソン2022で作成するポイントアプリのバックエンドAPI
servers:
  - url: http://{host}:8081/api/v1
    description: go service api server endpoint application
    variables:
      host:
        default: localhost
        enum:
          - localhost
paths:
  /account:
    get:
      security:
        - bearerAuth: []
      tags:
        - アカウント
      summary: アカウント情報取得
      description: |
        - セッションキーのユーザ情報を返却する
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 200
                  message:
                    type: string
                    example: アカウント情報の取得に成功しました。
                  data:
                    type: object
                    properties:
                      familyName:
                        type: string
                      userId:
                        type: number
                      familyNameKana:
                        type: string
                      firstName:
                        type: string
                      firstNameKana:
                        type: string
                      email:
                        type: string
                      acquisitionPoint:
                        type: integer
                        description: 保有ポイント
                      sendablePoint:
                        type: integer
                        description: 送信可能ポイント
                    example:
                      userId: 200
                      familyName: 山田
                      familyNameKana: ヤマダ
                      firstName: 太郎
                      firstNameKana: タロウ
                      email: yamada@sample.com
                      acquisitionPoint: 30000
                      sendablePoint: 1000
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '500':
          $ref: '#/components/responses/500Error'
    put:
      security:
        - bearerAuth: []
      tags:
        - アカウント
      summary: アカウント情報更新
      description: |
        - セッションキーのユーザ情報を更新する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                familyName:
                  type: string
                  example: 葛飾
                familyNameKana:
                  type: string
                  example: カツシカ
                firstName:
                  type: string
                  example: 北斎
                firstNameKana:
                  type: string
                  example: ホクサイ
              required:
                - firstName
                - firstNameKana
                - familyName
                - familyNameKana
                - email
      responses:
        '201':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: number
                    example: 201
                  message:
                    type: string
                    example: アカウント情報の更新に成功しました。
                  data:
                    type: object
                    example: null
        '400':
          $ref: '#/components/responses/400Error'
        '401':
          $ref: '#/components/responses/401UnauthorizedError'
        '500':
          $ref: '#/components/responses/500Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 認証トークン
  schemas:
    Error:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          example: '400'
        title:
          type: string
          example: パラメータエラー
        message:
          type: string
          example: 'name: cannot be blank.'
  responses:
    400Error:
      description: |
        パラメーターエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: '400'
            title: パラメータエラー
            message: 'name: cannot be blank.'
    401UnauthorizedError:
      description: |
        認証失敗
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: '401'
            title: 認証エラー
            message: 認証が失敗しました。再ログインしてください。
    404Error:
      description: |
        データ存在しない
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: '404'
            title: データが存在しないエラー
            message: データが存在しません。
    500Error:
      description: |
        サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            statusCode: '500'
            title: サーバーエラー
            message: サーバー側で何らかのエラーが発生しました。時間をおいて再度アクセスしてください。
