// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createUsers = `-- name: CreateUsers :execresult
INSERT INTO ` + "`" + `users` + "`" + ` (
  ` + "`" + `family_name` + "`" + `, ` + "`" + `family_name_kana` + "`" + `, ` + "`" + `first_name` + "`" + `, ` + "`" + `first_name_kana` + "`" + `, ` + "`" + `email` + "`" + `, ` + "`" + `password` + "`" + `, ` + "`" + `sending_point` + "`" + `, ` + "`" + `created_at` + "`" + `, ` + "`" + `update_at` + "`" + `
) 
VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateUsersParams struct {
	FamilyName     string    `db:"family_name"`
	FamilyNameKana string    `db:"family_name_kana"`
	FirstName      string    `db:"first_name"`
	FirstNameKana  string    `db:"first_name_kana"`
	Email          string    `db:"email"`
	Password       string    `db:"password"`
	SendingPoint   int32     `db:"sending_point"`
	CreatedAt      time.Time `db:"created_at"`
	UpdateAt       time.Time `db:"update_at"`
}

func (q *Queries) CreateUsers(ctx context.Context, db DBTX, arg CreateUsersParams) (sql.Result, error) {
	return db.ExecContext(ctx, createUsers,
		arg.FamilyName,
		arg.FamilyNameKana,
		arg.FirstName,
		arg.FirstNameKana,
		arg.Email,
		arg.Password,
		arg.SendingPoint,
		arg.CreatedAt,
		arg.UpdateAt,
	)
}

const getByUserID = `-- name: GetByUserID :one
SELECT
  ` + "`" + `id` + "`" + `,
  ` + "`" + `email` + "`" + `
FROM
  ` + "`" + `users` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = ?
`

type GetByUserIDRow struct {
	ID    int64  `db:"id"`
	Email string `db:"email"`
}

func (q *Queries) GetByUserID(ctx context.Context, db DBTX, id int64) (GetByUserIDRow, error) {
	row := db.QueryRowContext(ctx, getByUserID, id)
	var i GetByUserIDRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
  ` + "`" + `users` + "`" + `
SET
  ` + "`" + `first_name` + "`" + ` = ?,
  ` + "`" + `family_name` + "`" + ` = ?,
  ` + "`" + `first_name_kana` + "`" + ` = ?,
  ` + "`" + `family_name_kana` + "`" + ` = ?,
  ` + "`" + `email` + "`" + ` = ?
WHERE ` + "`" + `id` + "`" + ` = ?
`

type UpdateUserParams struct {
	FirstName      string `db:"first_name"`
	FamilyName     string `db:"family_name"`
	FirstNameKana  string `db:"first_name_kana"`
	FamilyNameKana string `db:"family_name_kana"`
	Email          string `db:"email"`
	ID             int64  `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) error {
	_, err := db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.FamilyName,
		arg.FirstNameKana,
		arg.FamilyNameKana,
		arg.Email,
		arg.ID,
	)
	return err
}

const updateUserMail = `-- name: UpdateUserMail :exec
UPDATE
  ` + "`" + `users` + "`" + `
SET
  ` + "`" + `email` + "`" + ` = ?
WHERE ` + "`" + `id` + "`" + ` = ?
`

type UpdateUserMailParams struct {
	Email string `db:"email"`
	ID    int64  `db:"id"`
}

func (q *Queries) UpdateUserMail(ctx context.Context, db DBTX, arg UpdateUserMailParams) error {
	_, err := db.ExecContext(ctx, updateUserMail, arg.Email, arg.ID)
	return err
}
