// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package userrepo

import (
	"context"
	"database/sql"
	"time"
)

const createUsers = `-- name: CreateUsers :execresult
INSERT INTO ` + "`" + `users` + "`" + ` (
  ` + "`" + `family_name` + "`" + `, ` + "`" + `family_name_kana` + "`" + `, ` + "`" + `first_name` + "`" + `, ` + "`" + `first_name_kana` + "`" + `, ` + "`" + `email` + "`" + `, ` + "`" + `password` + "`" + `, ` + "`" + `sending_point` + "`" + `, ` + "`" + `created_at` + "`" + `, ` + "`" + `update_at` + "`" + `
) 
VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateUsersParams struct {
	FamilyName     string
	FamilyNameKana string
	FirstName      string
	FirstNameKana  string
	Email          string
	Password       string
	SendingPoint   int32
	CreatedAt      time.Time
	UpdateAt       time.Time
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUsers,
		arg.FamilyName,
		arg.FamilyNameKana,
		arg.FirstName,
		arg.FirstNameKana,
		arg.Email,
		arg.Password,
		arg.SendingPoint,
		arg.CreatedAt,
		arg.UpdateAt,
	)
}

const getByUserID = `-- name: GetByUserID :one
SELECT
  ` + "`" + `id` + "`" + `,
  ` + "`" + `email` + "`" + `
FROM
  ` + "`" + `users` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = ?
`

type GetByUserIDRow struct {
	ID    int64
	Email string
}

func (q *Queries) GetByUserID(ctx context.Context, id int64) (GetByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getByUserID, id)
	var i GetByUserIDRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
  ` + "`" + `users` + "`" + `
SET
  ` + "`" + `first_name` + "`" + ` = ?,
  ` + "`" + `family_name` + "`" + ` = ?,
  ` + "`" + `first_name_kana` + "`" + ` = ?,
  ` + "`" + `family_name_kana` + "`" + ` = ?,
  ` + "`" + `email` + "`" + ` = ?
WHERE ` + "`" + `id` + "`" + ` = ?
`

type UpdateUserParams struct {
	FirstName      string
	FamilyName     string
	FirstNameKana  string
	FamilyNameKana string
	Email          string
	ID             int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.FamilyName,
		arg.FirstNameKana,
		arg.FamilyNameKana,
		arg.Email,
		arg.ID,
	)
	return err
}

const updateUserMail = `-- name: UpdateUserMail :exec
UPDATE
  ` + "`" + `users` + "`" + `
SET
  ` + "`" + `email` + "`" + ` = ?
WHERE ` + "`" + `id` + "`" + ` = ?
`

type UpdateUserMailParams struct {
	Email string
	ID    int64
}

func (q *Queries) UpdateUserMail(ctx context.Context, arg UpdateUserMailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserMail, arg.Email, arg.ID)
	return err
}
