// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository/repository.go -destination=./repository/_mock/mock_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBeginner is a mock of Beginner interface.
type MockBeginner struct {
	ctrl     *gomock.Controller
	recorder *MockBeginnerMockRecorder
}

// MockBeginnerMockRecorder is the mock recorder for MockBeginner.
type MockBeginnerMockRecorder struct {
	mock *MockBeginner
}

// NewMockBeginner creates a new mock instance.
func NewMockBeginner(ctrl *gomock.Controller) *MockBeginner {
	mock := &MockBeginner{ctrl: ctrl}
	mock.recorder = &MockBeginnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeginner) EXPECT() *MockBeginnerMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockBeginner) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockBeginnerMockRecorder) BeginTx(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockBeginner)(nil).BeginTx), ctx, opts)
}
