// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/querier.go
//
// Generated by this command:
//
//	mockgen -source=./repository/querier.go -destination=./repository/_mock/mock_querier.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	repository "github.com/Yuki-TU/oapi-codegen-sample/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateUsers mocks base method.
func (m *MockQuerier) CreateUsers(ctx context.Context, db repository.DBTX, arg repository.CreateUsersParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsers", ctx, db, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsers indicates an expected call of CreateUsers.
func (mr *MockQuerierMockRecorder) CreateUsers(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsers", reflect.TypeOf((*MockQuerier)(nil).CreateUsers), ctx, db, arg)
}

// GetByUserID mocks base method.
func (m *MockQuerier) GetByUserID(ctx context.Context, db repository.DBTX, id int64) (repository.GetByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, db, id)
	ret0, _ := ret[0].(repository.GetByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockQuerierMockRecorder) GetByUserID(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockQuerier)(nil).GetByUserID), ctx, db, id)
}

// GetPointByUserID mocks base method.
func (m *MockQuerier) GetPointByUserID(ctx context.Context, db repository.DBTX, receivingUserID uint64) (repository.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointByUserID", ctx, db, receivingUserID)
	ret0, _ := ret[0].(repository.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPointByUserID indicates an expected call of GetPointByUserID.
func (mr *MockQuerierMockRecorder) GetPointByUserID(ctx, db, receivingUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointByUserID", reflect.TypeOf((*MockQuerier)(nil).GetPointByUserID), ctx, db, receivingUserID)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(ctx context.Context, db repository.DBTX, arg repository.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), ctx, db, arg)
}

// UpdateUserMail mocks base method.
func (m *MockQuerier) UpdateUserMail(ctx context.Context, db repository.DBTX, arg repository.UpdateUserMailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMail", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserMail indicates an expected call of UpdateUserMail.
func (mr *MockQuerierMockRecorder) UpdateUserMail(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMail", reflect.TypeOf((*MockQuerier)(nil).UpdateUserMail), ctx, db, arg)
}
